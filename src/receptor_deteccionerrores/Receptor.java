/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package receptor_deteccionerrores;

import javax.swing.JOptionPane;

/**
 *
 * @author x230
 */
public class Receptor extends javax.swing.JFrame {

    /**
     * Creates new form Emisor
     */
    public Receptor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Tbinario = new javax.swing.JTextField();
        cbParidad = new javax.swing.JComboBox<>();
        Tdivisor = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        resultado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        jLabel1.setText("RECEPTOR");

        jLabel2.setText("Datos:");

        jLabel3.setText("Paridad:");

        jLabel4.setText("Divisor:");

        Tbinario.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        cbParidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Par", "Impar" }));

        Tdivisor.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jButton1.setText("Empezar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Caracter Recibido:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbParidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Tdivisor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Tbinario, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel1)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Tbinario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbParidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Tdivisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(resultado))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    char[] temp;
    char[] binarioLetra = new char[8];
    int[] binario;
    char[] temp2;
    int tamDivisor;
    int[] divisor;
    int paridad;
    boolean CRCcorrecto = true;
    String Lresultado = "";
    String binarioH = "";
    int bitError;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        paridad = cbParidad.getSelectedIndex();
        resultado.setText("");
        Lresultado = "";
        temp = Tbinario.getText().toCharArray();
        int tamBinario = temp.length;
        binario = new int[tamBinario];
        for (int i = 0; i < tamBinario; i++) {
            binario[i] = Character.getNumericValue(temp[i]);
        }
        tamDivisor = Tdivisor.getText().length();

        //==================================================
        divisor = new int[tamDivisor];
        temp2 = Tdivisor.getText().toCharArray();
        for (int i = 0; i < tamDivisor; i++) {
            divisor[i] = Character.getNumericValue(temp2[i]);
        }
        if (comprobacionCRC(CRCcorrecto) == true) {
            JOptionPane.showMessageDialog(null, "La verificación CRC no marco errores");
            limpiarTrama();
        } else {
            JOptionPane.showMessageDialog(null, "Se ha encontrado un error en algun bit.\nProcediendo a encontrarlo...");
            hamming();
            bitError = Integer.parseInt(binarioH, 2);
            JOptionPane.showMessageDialog(null, "Error encontrado en el bit #" + bitError + ".\nReparando...");
            if (binario[bitError - 1] == 0) {
                binario[bitError - 1] = 1;
            } else {
                binario[bitError - 1] = 0;
            }
            CRCcorrecto = true;
            JOptionPane.showMessageDialog(null, "Volviendo a analizar.\nEjecutando CRC");
            System.out.println("Lo que se manda es:");
            for (int i = 0; i < binario.length; i++) {
                System.out.print(binario[i]);
            }
            System.out.println(" ");
            if (comprobacionCRC(CRCcorrecto) == true) {
                JOptionPane.showMessageDialog(null, "Ya no se encontró ningún error");
                limpiarTrama();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo reparar existe más de un error :/");
            }
        }
        JOptionPane.showMessageDialog(null, "El programa se cerrará");
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receptor().setVisible(true);
            }
        });
    }

    public boolean comprobacionCRC(boolean crc) {
        int[] residuo;
        residuo = new int[tamDivisor];
        int i = 0;
        int k = 0;
        int limite = divisor.length - 1;
        int m = divisor.length - 1;
        while (m < binario.length) { //m<14

            if (i > (tamDivisor - 1)) {
                k = 0;
            }

            for (; i <= limite; i++) {
                if (i < divisor.length) {
                    if (binario[i] == 0 && divisor[k] == 1) {
                        residuo[k] = 1;
                    } else {
                        residuo[k] = binario[i] - divisor[k];
                    }
                } else {
                    if (residuo[k] == 0 && divisor[k] == 1) {
                        residuo[k] = 1;
                    } else {
                        residuo[k] = residuo[k] - divisor[k];
                    }
                }
                k++;
            }
            while (residuo[0] != 1 && m < binario.length) {
                m++;
                if (m == binario.length) {
                } else {
                    for (int j = 0; j < divisor.length; j++) {
                        if (j == (divisor.length - 1)) {
                            residuo[j] = binario[m];
                        } else {
                            residuo[j] = residuo[j + 1];
                        }
                    }
                }
            }
            limite = i + (tamDivisor - 1);
        }
        for (int j = 0; j < residuo.length; j++) {

            Lresultado += residuo[j];
            System.out.print(residuo[j]);
            if (residuo[j] > 0) {
                crc = false;
            }
        }

        return crc;
    }

    public void limpiarTrama() {
        int n = 0;
        for (int i = 0; i < 12; i++) {
            if (i == 0 || i == 1 || i == 3 || i == 7) {
            } else {
                binarioLetra[n] = (char) (binario[i] + '0');
                n++;
            }
        }
        getCaracter();
    }

    public void getCaracter() {
        String numeroBinario = String.valueOf(binarioLetra);
        int num = Integer.parseInt(numeroBinario, 2);
        char caracter = (char) num;
        resultado.setText(String.valueOf(caracter));
    }

    public void hamming() {
        int cero = 0;
        int uno = 0;
        //---8 si 8 no
        System.out.println("8 si");
        for (int i = 7; i < 12; i++) {
            if (binario[i] == 0) {
                cero++;
            } else {
                uno++;
            }
        }
        checarParidad(cero, uno);
        cero = 0;
        uno = 0;
        //---Cuatro si, cuatro no
        System.out.println("4 si");
        for (int i = 3; i < 12; i += 8) {
            if (binario[i] == 0) {
                cero++;
            } else {
                uno++;
            }
            if (i > 3) {
                break;
            } else {
                if (binario[i + 1] == 0) {
                    cero++;
                } else {
                    uno++;
                }
                if (binario[i + 2] == 0) {
                    cero++;
                } else {
                    uno++;
                }
                if (binario[i + 3] == 0) {
                    cero++;
                } else {
                    uno++;
                }
            }
        }
        checarParidad(cero, uno);
        cero = 0;
        uno = 0;
        //-----Dos si, dos no
        for (int i = 1; i < 11; i += 4) {
            if (binario[i] == 0) {
                cero++;
            } else {
                uno++;
            }
            if (binario[i + 1] == 0) {
                cero++;
            } else {
                uno++;
            }
        }
        checarParidad(cero, uno);
        cero = 0;
        uno = 0;
        //------Uno si uno no
        for (int i = 0; i < 11; i += 2) {
            if (binario[i] == 0) {
                cero++;
            } else {
                uno++;
            }
        }
        checarParidad(cero, uno);
        System.out.println("La cadena resultante fue: " + binarioH);
    }

    void checarParidad(int cero, int uno) {
        if (paridad == 0) {
            if (uno % 2 != 0) {
                binarioH += "1";
            } else {
                binarioH += "0";
            }
        } else {//significa que la paridad es impar
            if (uno % 2 != 0) {
                binarioH += "0";
            } else {
                binarioH += "1";
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Tbinario;
    private javax.swing.JTextField Tdivisor;
    private javax.swing.JComboBox<String> cbParidad;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel resultado;
    // End of variables declaration//GEN-END:variables

}
